@page "/maintenance-tasks"
@using DatabaseLibrary.Context
@using DatabaseLibrary.Models
@using Microsoft.EntityFrameworkCore
@inject Oblig4Context DbContext

<h1>Maintenance tasks</h1>
@if (maintenanceTasks == null || maintenanceTasks.Count == 0)
{
    <p>
        <em>No maintenance tasks found.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Room ID</th>
            <th>Status</th>
            <th>Notes</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var task in maintenanceTasks)
        {
            <tr>
                <td>@task.Id</td>
                <td>@task.Room_id</td>
                <td>@task.Status</td>
                <td>@task.Notes</td>
                <td>
                    @if (isEditing && editingTask == task)
                    {
                        <button @onclick="SaveEdit">Save</button>
                        <button @onclick="CancelEdit">Cancel</button>
                    }
                    else
                    {
                        <button @onclick="() => StartEdit(task)">Edit</button>
                    }
                </td>
            </tr>
            @if (isEditing && editingTask == task)
            {
                <tr>
                    <td><input @bind="editingTask.Id" /></td>
                    <td><input @bind="editingTask.Room_id" /></td>
                    <td><input @bind="editingTask.Status" /></td>
                    <td><input @bind="editingTask.Notes" /></td>
                    <td></td>
                </tr>
            }
        }
        </tbody>
    </table>
}

@code {
    private List<Maintenance_requests> maintenanceTasks = [];
    private bool isEditing;
    private Maintenance_requests editingTask;

    protected override async Task OnInitializedAsync()
    {
        maintenanceTasks = await DbContext.Maintenance_requests.ToListAsync();
    }

    void StartEdit(Maintenance_requests task)
    {
        editingTask = task;
        isEditing = true;
        StateHasChanged();
    }

    async Task SaveEdit()
    {
        DbContext.Maintenance_requests.Update(editingTask);
        await DbContext.SaveChangesAsync();

        maintenanceTasks = await DbContext.Maintenance_requests.ToListAsync();
        isEditing = false;
        StateHasChanged();
    }

    void CancelEdit()
    {
        DbContext.Entry(editingTask).State = EntityState.Unchanged;
        isEditing = false;
        StateHasChanged();
    }
}